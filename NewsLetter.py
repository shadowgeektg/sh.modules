"""

‚ñà‚ñÄ‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà
‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ

    Copyleft 2022 t.me/shadow_modules
    This module is free software
    You can edit this module
"""

from .. import loader, utils
from telethon.tl.types import Message
from ..inline.types import InlineCall

# meta developer: @shadow_modules, @hikarimods


@loader.tds
class NewsLetterMod(loader.Module):
    strings = {
        "name": "NewsLetter",
        "succnews": "<b>‚úÖ Newsletter successfully sent</b>\n<b>üëÅ‚Äçüó® Chats that were sent:</b>\n{}",
        "nochat": "<b>No chat to send</b>",
        "warnform": "<b>‚ö†Ô∏è Attention!</b>\n<b>üò∞ When sending a newsletter to a lot of chats, there may be a flood</b>\n<b>‚úÖ If you agree that you can get a flood, click on the button below</b>",
        "noargs": "<b>üò• There are no messages to send</b>",
        "yes": "‚úÖ Yes",
        "no": "‚ùå No",
    }
    strings_ru = {
        "succnews": "<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n<b>üëÅ‚Äçüó® –ß–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:</b>\n{}",
        "nochat": "<b>–ù–µ—Ç —á–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
        "warnform": "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b>\n<b>üò∞ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –º–Ω–æ–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–ª—É–¥–≤–µ–π—Ç</b>\n<b>‚úÖ –ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–µ–º —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–ª—É–¥–≤–µ–π—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>",
        "noargs": "<b>üò• –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ-–±—ã —Ä–∞—Å—Å—ã–ª–∞—Ç—å</b>",
        "yes": "‚úÖ –î–∞",
        "no": "‚ùå –ù–µ—Ç",
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "chats",
                [],
                lambda: "Chat for newsletter",
                validator=loader.validators.Series(
                    validator=loader.validators.Union(
                        loader.validators.TelegramID(),
                        loader.validators.RegExp("^@[a-zA-Z0-9_]{1,32}$"),
                    ),
                ),
            ),
        )

    async def sendnewscmd(self, message: Message):
        if self.get("warn") == "no":
            await self.inline.form(
                message=message,
                text=self.strings("warnform"),
                reply_markup=[
                    [
                        {
                            "text": self.strings("yes"),
                            "callback": self.inline__callAnswer,
                            "args": ("yes",),
                        },
                    ],
                    [
                        {
                            "text": self.strings("no"),
                            "callback": self.inline__callAnswer,
                            "args": ("no",),
                        },
                    ],
                ],
            )
            return

        args = utils.get_args_raw(message)
        chats = self.config["chats"]
        try:
            for chat in chats:
                await self.client.send_message(chat, args)

            await utils.answer(
                message,
                self.strings("succnews").format("\n".join(map(str, chats))),
            )
        except ValueError:
            await utils.answer(message, self.strings("noargs"))

    async def inline__callAnswer(self, call: InlineCall, value: str):
        self.set("warn", value)
        await call.delete()
